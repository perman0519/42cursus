version: '3.0'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: dockerfile
    volumes:
      - ./nginx/config/:/etc/nginx/conf.d/
      - ./logs/nginx:/var/log/nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      - django
    networks:
      - tscen

  postgresql:
    container_name: postgresql
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${db_name}
      - POSTGRES_USER=${db_user}
      - POSTGRES_PASSWORD=${db_pw}
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${db_user} -d ${db_name}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tscen
    env_file:
      - .env

  django:
    container_name: django
    build:
      context: ./django
      dockerfile: dockerfile
    volumes:
      - ./logs/django:/app/app/logs
    ports:
      - 8000:8000
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - tscen
    env_file:
      - .env

  # elasticsearch:
  #   container_name: elasticsearch
  #   image: elasticsearch:8.14.2
  #   ports:
  #     - 9200:9200
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - xpack.security.http.ssl.enabled=false
  #   networks:
  #     - tscen
  #   env_file:
  #     - .env
  #   tty: true
  #   stdin_open: true
  # elasticsearch:
  #   container_name: elasticsearch
  #   image: elasticsearch:8.14.2
  #   ports:
  #     - 9200:9200
  #   env_file:
  #     - .env
  #   environment:
  #     - discovery.type=single-node
  #   networks:
  #     - tscen
  #   healthcheck:
  #     test: curl -s http://localhost:9200/_cluster/health -k | grep -vq '"status":"green"'
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   volumes:
  #       - ./elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
  #       - ./certs:/usr/share/elasticsearch/config/certs
  #       - es_data:/usr/share/elasticsearch/data
  #       - ./elk/elasticsearch/elasticsearch-setup.sh:/usr/local/bin/elasticsearch-setup.sh
  #   command: ["/bin/bash", "/usr/local/bin/elasticsearch-setup.sh"]
  # logstash:
  #   container_name: logstash
  #   build:
  #     context: ./elk/logstash/
  #   logstash:
  #     container_name: logstash
  #     image: logstash:8.14.2
  #     volumes:
  #   #     - ./elk/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
  #       - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
  #     ports:
  #       - 5044:5044
  #     networks:
  #       - tscen
  #     depends_on:
  #       - elasticsearch
  #     env_file:
  #       - .env

  # kibana:
  #   container_name: kibana
  #   image: kibana:8.14.2
  #   ports:
  #     - 5601:5601
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   networks:
  #     - tscen
  #   depends_on:
  #     - elasticsearch
  #   filebeat:
  #     container_name: filebeat
  #     image: elastic/filebeat:8.14.2
  #     volumes:
  #       - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #       - ./nginx/logs:/var/log/nginx:ro
  #       - ./django/app/logs:/app/logs:ro
  #       - ./certs:/usr/share/filebeat/certs:ro
  #     networks:
  #       - tscen

volumes:
  postgres_data:
    driver: local
    name: postgres_data
    driver_opts:
      type: none
      o: bind
      device: ./postgres/
  # es_data:
  #   name: es_data
  # shared_data:
  #   name: shared_data

networks:
  tscen:
    name: pong
    driver: bridge
